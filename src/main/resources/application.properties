server.port=8081

vaadin.frontend.hotdeploy=true

spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=7642
spring.jpa.hibernate.ddl-auto=update

# keycloak.auth-server-url=http://localhost:8080/
# keycloak.realm=test
# keycloak.resourzzasce=test
# keycloak.credentials.secret=9P8CfTXyVYcsJFWo6scGi6nRTCtlOt9E

spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# # spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/login/oauth2/code/keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_BASE_URL}/realms/${KEYCLOAK_REALM}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${spring.security.oauth2.client.provider.keycloak.issuer-uri}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.client.provider.keycloak.issuer-uri}/protocol/openid-connect/certs

opa.url=http://localhost:8181

spring.resources.cache.cachecontrol.max-age=0
spring.resources.cache.cachecontrol.must-revalidate=true
# spring.security.oauth2.client.oauth2.username=user
# spring.security.oauth2.client.oauth2.password=123